name: functional

on:
  workflow_call:

# smoke test definition.
# It depends on build.yml that is controlled via control.yml
#
jobs:
  # Tests that gvm-libs, openvas-smb and openvas dependencies work together and
  # that openvas is buildable and integrates openvas-smb when available
  distributed-monolith-railguard:
    runs-on: self-hosted-generic
    strategy:
      fail-fast: false
      matrix:
        system:
          - debian_stable
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t test -f .docker/railguards/${{matrix.system}}.Dockerfile .
      - run: docker run --rm test ldd /usr/local/sbin/openvas
      - run: docker run --rm test ldd /usr/local/sbin/openvas | grep libopenvas_wmiclient
      - run: docker rmi test || true
  build-rs:
    runs-on: self-hosted-generic
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/compile-x86_64
      - name: archive
        uses: actions/upload-artifact@v4
        with:
          name: rs-binaries
          path: assets/*
          retention-days: 1
  build-image:
    runs-on: self-hosted-generic
    steps:
      - uses: actions/checkout@v4
      - run: |
          docker build -t registry.community.greenbone.net/community/openvas-scanner:edge -f .docker/prod.Dockerfile .
          docker pull registry.community.greenbone.net/community/vulnerability-tests:community
          docker pull registry.community.greenbone.net/community/notus-data:community
          docker save -o ${{ runner.temp }}/vtc.tar registry.community.greenbone.net/community/vulnerability-tests:community
          docker save -o ${{ runner.temp }}/nc.tar registry.community.greenbone.net/community/notus-data:community
          docker save -o ${{ runner.temp }}/openvas.tar registry.community.greenbone.net/community/openvas-scanner:edge
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ovimage
          path: ${{ runner.temp }}/*.tar

  smoketest:   
    # currently we cannot use internal runner as they cannot start k3s until it
    # is fixed we need to build the image in another job running on
    # self-hosted-generic export it as a tar and import it here to work around
    # the unreliability of registry.community.greenbone.net/community
    # when called too often
    runs-on: ubuntu-latest
    needs: [build-image]
    steps:
      - name: Start a local k8s cluster
        uses: jupyterhub/action-k3s-helm@v4
        with:
          k3s-channel: latest
          metrics-enabled: false
          docker-enabled: true
      - uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ovimage
          path: ${{ runner.temp }}
      - name: publish current docker image into k3s
        run: |
          docker load --input ${{ runner.temp }}/openvas.tar
          docker load --input ${{ runner.temp }}/nc.tar
          docker load --input ${{ runner.temp }}/vtc.tar
          docker image ls -a
      - name: 'do not, I repeat, do NOT pull that'
        run: |
          # repository: registry.community.greenbone.net/community/openvas-scanner
          # pullPolicy: Always
          # tag: "edge"
          echo "openvas:" >> st.yaml
          echo "  repository: registry.community.greenbone.net/community/openvas-scanner" >> st.yaml
          echo "  tag: edge" >> st.yaml
          echo "  pullPolicy: Never" >> st.yaml
          echo "vulnerabilitytests:" >> st.yaml
          echo "  repository: registry.community.greenbone.net/community/vulnerability-tests" >> st.yaml
          echo "  tag: community" >> st.yaml
          echo "  pullPolicy: Never" >> st.yaml
          echo "notusdata:" >> st.yaml
          echo "  repository: registry.community.greenbone.net/community/notus-data" >> st.yaml
          echo "  tag: community" >> st.yaml
          echo "  pullPolicy: Never" >> st.yaml
          cat st.yaml
      - name: deploy openvasd
        run: |
          cd rust/examples/tls/self-signed
          make delete deploy
          cd -

          helm uninstall openvasd --namespace openvasd|| true
          helm install --namespace openvasd --create-namespace openvasd charts/openvasd/ \
            --values charts/openvasd/values.yaml \
            --values charts/openvasd/mtls-wo-ingress.yaml \
            --values st.yaml
          kubectl rollout status --watch --timeout 600s deployment/openvasd --namespace openvasd 
          echo "OPENVASD_SERVER=https://$(kubectl get svc -n openvasd | awk 'FNR == 2 {print $(3)}')" >> $GITHUB_ENV
      - run: kubectl get pods -n openvasd -o=wide
      - run: kubectl describe pod openvasd -n openvasd
      - name: smoketest
        working-directory: rust/crates/smoketest
        env:
          SCAN_CONFIG: configs/simple_scan_ssh_only.json
          CLIENT_KEY: ../../examples/tls/self-signed/client.rsa
          CLIENT_CERT: ../../examples/tls/self-signed/client.pem
        run: |
          make build run || ls -las ../../
      # - uses: actions/cache@v4
      #   with:
      #     path: /tmp/openvas.tar
      #     key: openvas-cache-${{ github.run_id }}
  tests:
    runs-on: self-hosted-generic
    needs: [build-rs]
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    container:
      image: greenbone/gvm-libs:stable
      options: --privileged
    steps:
      - uses: actions/checkout@v4
      - name: install dependencies
        run: |
          sh .github/install-openvas-dependencies.sh
      - name: install openvas
        run: |
          cmake -Bbuild -DCMAKE_BUILD_TYPE=Release
          cmake --build build -- install
      - uses: actions/download-artifact@v4
        with:
          name: rs-binaries
          path: assets
      - name: prepare setup
        run: |
          apt-get update && apt-get install --no-install-recommends --no-install-suggests -y \
            docker.io
          FEED_DIR="feed/" sh .github/prepare-feed.sh
          install -m 755 assets/linux/amd64/feed-verifier /usr/local/bin/
          install -m 755 assets/linux/amd64/scannerctl /usr/local/bin/
          echo "db_address = tcp://redis:6379" >> /etc/openvas/openvas.conf
          # TODO export as env variable
          mv ./feed/* "$(openvas -s | grep plugins_folder | sed 's/plugins_folder = //')/"
      - run: openvas -s
      - name: verify feed syntax
        run: scannerctl syntax --quiet "$(openvas -s | grep plugins_folder | sed 's/plugins_folder = //')/"
      - name: verify feed update
        run: feed-verifier || (cat /var/log/gvm/openvas.log && false)
      - name: verify nasl tests
        run: |
          mkdir -p /etc/openvas
          cd nasl/tests
          make check
      - uses: actions/setup-go@v5
        with:
          go-version: '>=1.16.0'
      - name: verify lint
        run: |
          make build
          ./run -e openvas-nasl-lint
        working-directory: smoketest_lint
