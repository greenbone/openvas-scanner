# Openvasd contains several modes to control the behavior of it.
# Service enables nasl and notus feed observations all endpoints.
mode = "service"
# Notus disables /scan endpoints and just observes the notus feed.
# mode = "service_notus"

[feed]
# Path to the openvas feed. This is required for the /vts endpoint.
path = "/var/lib/openvas/plugins"
# Disables or enables the signature check
signature_check = true

# How often the feed should be checked for updates
check_interval = "3600s"

[notus]
# Path to the notus feed. This is required for the /notus endpoint
products_path = "/var/lib/notus/products/"
# path to the notus advisories feed. This is required for the /vts endpoint
advisories_path = "/var/lib/notus/advisories/"

[endpoints]
# Enables GET /scans endpoint
enable_get_scans = true
# If set it requires `x-api-key` header to use the endpoint
key = "mtls_is_preferred"

[tls]
# The server certificate
certs = "/etc/openvasd/tls/server.pem"
# Server key
key = "/var/lib/openvasd/tls/server.rsa"
# dir that contains client certificates. If there are none than every client is
# allowed to connect otherwise just the clients that have the configured
# client certificates.
client_certs = "/etc/openvasd/tls/client"

[scanner]
# Supported types:
#   "ospd": Old API which will be deprecated soon
#   "openvas": Current C based openvas-scanner
#   "openvasd": New Rust based scanner which is not yet fully implemented
# If "ospd" is used the ospd related settings have to be set.
type = "openvas"

[scanner.ospd]
# Path to the unix socket of ospd-openvas
socket = "/var/run/ospd/ospd.sock"

[scanner.ospd.read_timeout]
# Max time openvasd waits for an ospd-openvas response before
# returning a 500 code (Internal server error). Using the config
# file, it can be set in seconds and nanoseconds.
secs = 1
nanos = 0

[ospd.result_check_interval]
# interval of checking for results for started scans
secs = 1
nanos = 0

[listener]
# ip address and port to listen to
address = "127.0.0.1:3000"

[logging]
level = 'INFO'

[logging.additional]
# with that we can set other packages to be quieter
sqlx = 'WARN'




[storage]
# The location can be either in-memory or a path
location = 'in-memory'
busy_timeout = '2s'
max_connections = 1
# credentials are stored encrypted. To set a manual key you can set credential_key
credential_key = "verysecretive"

[scheduler]
# Sets the maximum number scans that can be queued at once. If not set, there is no limit.
# max_queued_scans = 10
# Sets the maximum number of scans that can run in parallel. If the maximum number is reached,
# queued scans remain in the queue.  If not set, there is no limit.
# max_running_scans = 10
# Minimum memory that must be available in order to start a scan. If not set, there is no limit.
# min_free_mem = 2147483648 # 2GiB

# Iteration interval for the scheduler
check_interval = "500ms"

[container_image_scanner.database]
location = 'in-memory'
busy_timeout = '2s'
max_connections = 1

[container_image_scanner.image]
extract_to = '/tmp/openvasd/cis'
max_scanning = 1
batch_size = 1
