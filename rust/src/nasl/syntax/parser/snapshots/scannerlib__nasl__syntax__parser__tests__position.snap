---
source: src/nasl/syntax/parser/tests.rs
expression: "crate :: nasl :: syntax :: parser :: tests ::\nparse_program_ok(stringify! (position),\nr#\"\n        a = 1 + 1;\n        b = 2 * 2;\n        a = ++a;\n        arr = mkarray(a, b, c      );\n        arr[++a];\n        exit(1);\n        return 1;\n        include('test.inc');\n        local_var a, b, c;\n        global_var a, b, c;\n        if (a) display(1); else display(2);\n        for (i = 1; i < 10; i++) display(i);\n        while(TRUE) display(i);\n        foreach a(q) display(a);\n        repeat display(\"q\"); until 1;\n        {\n            a;\n            b;\n        }\n        function register_packages( buf ) { return 1; }\n    \"#).into_iter().map(|\nstmt | stmt.to_string()).collect :: < Vec < _ >> ().join(\"\\n\")"
---
a = (1 + 1);
b = (2 * 2);
a = ++a;
arr = mkarray(a, b, c);
arr[++a];
exit(1);
return (1);
include('test.inc');
local_var a, b, c;
global_var a, b, c;
if (a) {
  display(1);
} else {
  display(2);
}
for (i = 1; (i < 10); i++;) {
  display(i);
}
while (TRUE) {
  display(i);
}
foreach a (q) {
  display(a);
}
repeat {
  display("q");
} until (1);
{
  a;
  b;
}
function register_packages (buf) {
  return (1);
}
